#!/bin/sh /etc/rc.common
#
# Copyright (C) 2017 Xingwang Liao <kuoruan@gmail.com>
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

START=90
STOP=15

NAME=shadowsocks
EXTRA_COMMANDS=rules

SS_RULES=/usr/bin/ss-rules
SS_PLUGINS=/var/run/ss-plugin

if [ -r /usr/share/libubox/jshn.sh ]; then
	. /usr/share/libubox/jshn.sh
else
	logger -st $NAME -p3 "Please install jshn first."
	exit 1
fi

command_exists() {
	command -v "$@" >/dev/null 2>&1
}

uci_get_by_type_name(){
	local ret
	ret="$(uci -q get ${NAME}.@${1}[-1].${2})"
	echo ${ret:=$3}
}

_print_log() {
	logger -st $NAME -p3 $1
}

validate_server() {
	local cfg="$1"
	[ -n "$cfg" ] && [ "$(uci -q get $NAME.$cfg)" = "servers" ]
}

_load_config() {
	if [ -z "$config_loaded" ]; then
		config_load $NAME
		config_loaded="true"
	fi
}

start_rules() {
	local self_proxy servers lan_hosts
	local udp_relay_server extra_params

	servers_cb() {
		local cfg="$1"

		local server

		config_get server "$cfg" server
		append servers "$server"
	}

	lan_hosts_cb() {
		local cfg="$1"

		local is_enable

		config_get_bool is_enable "$cfg" enable "0"

		if [ "$is_enable" -gt 0 ]; then
			local host_type host

			config_get host_type "$cfg" type
			config_get host "$cfg" host

			append lan_hosts "${host_type},${host}"
		fi
	}

	config_foreach servers_cb "servers"
	config_foreach lan_hosts_cb "lan_hosts"

	self_proxy=$(uci_get_by_type_name access_control self_proxy 1)
	case "$self_proxy" in
		1)
			append extra_params "-o"
			;;
		2)
			append extra_params "-O"
			;;
	esac

	udp_relay_server=$(uci_get_by_type_name transparent_proxy udp_relay_server)
	if [ "$udp_relay_server" = "same" ] || validate_server "$udp_relay_server"; then
		append extra_params "-u"
	fi

	$SS_RULES \
		-l "$(uci_get_by_type_name transparent_proxy local_port 1234)" \
		-B "$(uci_get_by_type_name access_control wan_bp_list)" \
		-b "$(uci_get_by_type_name access_control wan_bp_ips)" \
		-W "$(uci_get_by_type_name access_control wan_fw_list)" \
		-w "$(uci_get_by_type_name access_control wan_fw_ips)" \
		-I "$(uci_get_by_type_name access_control lan_ifaces)" \
		-d "$(uci_get_by_type_name access_control lan_target)" \
		-e "$(uci_get_by_type_name access_control ipt_ext)" \
		-s "$servers" \
		-a "$lan_hosts" \
		"$extra_params"
}

rules() {
	pidof ss-redir ssr-redir >/dev/null || return 0
	_load_config
	start_rules || $SS_RULES -f
}

gen_config_file() {
	local cfg="$1"
	local ssr_server="$2"

	local config_file=/var/etc/${NAME}.${cfg}.json

	local server server_port key encrypt_method timeout

	config_get server "$cfg" server
	config_get server_port "$cfg" server_port
	config_get encrypt_method "$cfg" encrypt_method
	config_get timeout "$cfg" timeout 60

	json_init
	json_add_string "server" "$server"
	json_add_int "server_port" "$server_port"
	json_add_string "local_address" "0.0.0.0"
	json_add_string "method" "$encrypt_method"
	json_add_int "timeout" "$timeout"

	if [ "$ssr_server" -gt 0 ]; then
		local password protocol protocol_param obfs obfs_param

		config_get password "$cfg" password
		config_get protocol "$cfg" protocol "origin"
		config_get protocol_param "$cfg" protocol_param
		config_get obfs "$cfg" obfs "plain"
		config_get obfs_param "$cfg" obfs_param

		if [ -z "$password" ]; then
			_print_log "The password is not set."
			return 1
		fi

		json_add_string "password" "$password"
		json_add_string "protocol" "$protocol"
		json_add_string "protocol_param" "$protocol_param"
		json_add_string "obfs" "$obfs"
		json_add_string "obfs_param" "$obfs_param"
	else
		local password key plugin plugin_opts

		config_get password "$cfg" password
		config_get key "$cfg" key
		config_get plugin "$cfg" plugin
		config_get plugin_opts "$cfg" plugin_opts

		if [ -n "$key" ]; then
			json_add_string "key" "$key"
		elif [ -n "$password" ]; then
			json_add_string "password" "$password"
		else
			_print_log "The password or key is not set."
			return 1
		fi

		json_add_boolean "reuse_port" "1"

		if [ -n "$plugin" ] && [ -n "$plugin_opts" ]; then
			echo "$plugin" >>/var/run/ss-plugin

			json_add_string "plugin" "$plugin"
			json_add_string "plugin_opts" "$plugin_opts"
		fi

	fi

	json_close_object

	if (json_dump -i > "$config_file"); then
		echo "$config_file"
	fi
}

start_redir() {
	local cfg="$1"

	local local_port mtu udp_relay_server

	config_get local_port "$cfg" local_port 1234
	config_get mtu "$cfg" mtu 1492
	config_get udp_relay_server "$cfg" udp_relay_server

	start_instance() {
		local server="$1"
		local identifier="$2"

		validate_server "$server" || return 1

		local ssr_server bin

		config_get_bool ssr_server "$server" ssr_server "0"

		if [ "$ssr_server" -gt 0 ]; then
			if [ -n "$has_redir" ]; then
				return 1
			fi
			bin="ssr-redir"
		else
			if [ -n "$has_ssr_redir" ]; then
				_print_log "Already has ssr-redir started, ss-redir will not start."
				return 1
			fi
			bin="ss-redir"
		fi

		command_exists "$bin" || return 1

		local config_file
		config_file="$(gen_config_file "$server" "$ssr_server")"

		if [ -f "$config_file" ]; then
			local params

			append params "-c $config_file"
			append params "-l $local_port"
			append params "--mtu $mtu"
			append params "-f /var/run/ss-redir${identifier}-${server}.pid"

			if [ "$identifier" = "-udp" ]; then
				append params "-U"
			elif [ "$udp_relay_server" = "same" ]; then
				append params "-u"
			fi

			sh -c "$bin $params"

			if [ "$?" = "0" ]; then
				if [ "$ssr_server" -gt 0 ]; then
					has_ssr_redir="true"
				fi
				has_redir="true"
			fi
		fi
	}

	config_list_foreach "$cfg" main_server start_instance

	start_instance "$udp_relay_server" "-udp"
}

start_local() {
	local cfg="$1"

	local local_port mtu

	config_get local_port "$cfg" local_port 1080
	config_get mtu "$cfg" mtu 1492

	start_instance() {
		local server="$1"

		validate_server "$server" || return 1

		local ssr_server bin

		config_get_bool ssr_server "$server" ssr_server "0"

		if [ "$ssr_server" -gt 0 ]; then
			if [ -n "$has_local" ]; then
				return 1
			fi
			bin="ssr-local"
		else
			if [ -n "$has_ssr_local" ]; then
				_print_log "Already has ssr-local started, ss-local will not start."
				return 1
			fi
			bin="ss-local"
		fi

		command_exists "$bin" || return 1

		local config_file
		config_file="$(gen_config_file "$server" "$ssr_server")"

		if [ -f "config_file" ]; then
			local params

			append params "-c $config_file"
			append params "-l $local_port"
			append params "--mtu $mtu"
			append params "-u"
			append params "-f /var/run/ss-local-${server}.pid"

			sh -c "$bin $params"
			if [ "$?" = "0" ]; then
				if [ "$ssr_server" -gt 0 ]; then
					has_ssr_local="true"
				fi
				has_local="true"
			fi

		fi
	}

	config_list_foreach "$cfg" server start_instance
}

start_tunnel() {
	local cfg="$1"

	local local_port mtu destination

	config_get local_port "$cfg" local_port 5300
	config_get mtu "$cfg" mtu 1492
	config_get destination "$cfg" destination "8.8.4.4:53"

	start_instance() {
		local server="$1"

		validate_server "$server" || return 1

		local ssr_server bin

		config_get_bool ssr_server "$server" ssr_server "0"

		if [ "$ssr_server" -gt 0 ]; then
			if [ -n "$has_tunnel" ]; then
				return 1
			fi

			bin="ssr-tunnel"
		else
			if [ -n "$has_ssr_tunnel" ]; then
				_print_log "Already has ssr-tunnel started, ss-tunnel will not start."
				return 1
			fi
			bin="ss-tunnel"
		fi

		command_exists "$bin" || return 1

		local config_file
		config_file="$(gen_config_file "$server" "$ssr_server")"

		if [ -f "$config_file" ]; then
			local params

			append params "-c $config_file"
			append params "-l $local_port"
			append params "-L $destination"
			append params "--mtu $mtu"
			append params "-u"
			append params "-f /var/run/ss-tunnel-${server}.pid"

			sh -c "$bin $params"
			if [ "$?" = "0" ]; then
				if [ "$ssr_server" -gt 0 ]; then
					has_ssr_tunnel="true"
				fi
				has_tunnel="true"
			fi
		fi

	}

	config_list_foreach "$cfg" server start_instance
}

start_proxy() {
	local cfg="$1"
	local type="$2"

	start_$type "$cfg"
}

kill_all() {
	kill -9 "$(pidof $@)" >/dev/null 2>&1
}

start() {
	_load_config

	mkdir -p /var/run /var/etc
	config_foreach start_proxy "transparent_proxy" "redir"
	config_foreach start_proxy "socks5_proxy" "local"
	config_foreach start_proxy "port_forward" "tunnel"

	[ -n "$has_redir" ] && rules
}

stop() {
	$SS_RULES -f

	kill_all ss-redir ss-local ss-tunnel \
		ssr-redir ssr-local ssr-tunnel

	if [ -f "$SS_PLUGINS" ]; then
		kill_all "$(sort -u "$SS_PLUGINS")"
		rm -f "$SS_PLUGINS"
	fi
}

boot() {
	local delay
	delay=$(uci_get_by_type_name general startup_delay 0)
	(sleep $delay && start >/dev/null 2>&1) &
	return 0
}
